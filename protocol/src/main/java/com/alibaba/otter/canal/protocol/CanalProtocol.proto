package com.alibaba.otter.canal.protocol;

//用于客户端和服务器端通信的数据
option java_package = "com.alibaba.otter.canal.protocol";
option java_outer_classname = "CanalPacket";
option optimize_for = SPEED;

###压缩方式
enum Compression {
    NONE = 1;
    ZLIB = 2;
    GZIP = 3;
    LZF = 4;
}

//包的类型
enum PacketType {
    HANDSHAKE = 1;//三次握手服务,即第一个请求
    CLIENTAUTHENTICATION = 2;//客户端发送权限信息
    ACK = 3;//服务器返回的确定信息
    SUBSCRIPTION = 4;//客户端发送订阅
    UNSUBSCRIPTION = 5;//客户端取消订阅
    GET = 6;//客户端发送请求事件
    MESSAGES = 7;//服务器返回了事件信息
    CLIENTACK = 8;//客户端发送确定事件
    // management part
    SHUTDOWN = 9;
    // integration
    DUMP = 10;
    HEARTBEAT = 11;
    CLIENTROLLBACK = 12;//客户端发送回滚请求
}

//一个事件包
message Packet {
    optional int32 magic_number = 1 [default = 17];
    optional int32 version = 2 [default = 1];//版本号,默认是1
    optional PacketType type = 3;//包的类型
    optional Compression compression = 4 [default = NONE];
    optional bytes body = 5;
}

message HeartBeat {
    optional int64 send_timestamp = 1;
    optional int64 start_timestamp = 2;
}

//握手对象
message Handshake {
    optional string communication_encoding = 1 [default = "utf8"];//编码方式
    optional bytes seeds = 2;//种子
    repeated Compression supported_compressions = 3;//支持的压缩方式
}

// client authentication 客户端权限请求信息
message ClientAuth {
    optional string username = 1;//用户名
    optional bytes password = 2; // hashed password with seeds from Handshake message
    optional int32 net_read_timeout = 3 [default = 0]; // in seconds
    optional int32 net_write_timeout = 4 [default = 0]; // in seconds
    optional string destination = 5;
    optional string client_id = 6;
    optional string filter = 7;
    optional int64 start_timestamp = 8;
}

//服务器返回的内容,包含状态以及提示信息
message Ack {
    optional int32 error_code = 1 [default = 0];
    optional string error_message = 2; // if something like compression is not supported, erorr_message will tell about it.
}

//发送给服务器说明这个批处理已经消费完成了
message ClientAck {
    optional string destination = 1;//通知服务器哪个客户端,对哪个目的地队列的哪个批处理ID消费成功
    optional string client_id = 2;
    optional int64 batch_id = 3;
}

// subscription 订阅服务对象
message Sub {
    optional string destination = 1;
    optional string client_id = 2;
    optional string filter = 7;
}

// Unsubscription 取消订阅服务对象
message Unsub {
    optional string destination = 1;
    optional string client_id = 2;
    optional string filter = 7;
}

//  PullRequest 获取请求对象
message Get {
    optional string destination = 1;//获取哪个目的地的事件
    optional string client_id = 2;//客户端唯一表示
    optional int32 fetch_size = 3;//客户端要抓多少条事件
    optional int64 timeout = 4 [default = -1]; // 默认-1时代表不控制
    optional int32 unit = 5 [default = 2];// 数字类型，0:纳秒,1:毫秒,2:微秒,3:秒,4:分钟,5:小时,6:天
    optional bool auto_ack = 6 [default = false]; // 是否自动ack
}

//返回的事件集合
message Messages {
	optional int64 batch_id = 1;//返回的批处理ID
    repeated bytes messages = 2;//每一个事件对应一个字节数组,因此返回的是List<byte>
}

// TBD when new packets are required
//发送dump命令
message Dump{
    optional string journal = 1;//binlog文件
    optional int64  position = 2;//从什么位置去dump
    optional int64 timestamp = 3 [default = 0];//或者按照时间去dump
}

//客户端回滚请求实体,通知服务器该客户端要回滚哪一个队列的数据,该数据是批处理ID指代的数据
message ClientRollback{
    optional string destination = 1;
    optional string client_id = 2;
    optional int64 batch_id = 3;
}